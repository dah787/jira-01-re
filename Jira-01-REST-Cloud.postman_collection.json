{
	"info": {
		"_postman_id": "86f46602-0a4b-49d4-aafc-db1bbc981ff7",
		"name": "Jira-01-REST-Cloud",
		"description": "Atlassian Jira user scenario \"User can log in, get information, create and delete dashboards, projects and issues\":\r\n1.Get Jira instance info\r\n2.Get current user\r\n3.Get dashboards\r\n4.Get projects paginated\r\n5.Create project\r\n6.Get project components\r\n7.Create issue\r\n8.Get issue comments\r\n9.Get issue metadata\r\n10.Delete project\r\n11.Get deleted project (check if existed)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Get Jira instance info",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6ee2059f-eb18-4af5-aa1d-0d2ccfb63869",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"User \" + pm.environment.get(\"userEmail\") + \" has base URL \" + jsonData.baseUrl)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/rest/api/3/serverInfo",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"rest",
						"api",
						"3",
						"serverInfo"
					]
				},
				"description": "Server info\r\nThis resource provides information about the Jira instance.\r\n\r\nGet Jira instance info\r\nGET /rest/api/3/serverInfo\r\n\r\nReturns information about the Jira instance.\r\n\r\nThis operation can be accessed anonymously.\r\n\r\nPermissions required: None.\r\n\r\nApp scope required: READ\r\n\r\nOAuth scopes required: \r\nNone\r\nRequest\r\nThere are no parameters for this request."
			},
			"response": []
		},
		{
			"name": "Get current user",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "cc7a10a7-3938-4c4c-94d7-559b44bfa386",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"User \" + pm.environment.get(\"userEmail\") + \" has display name \" + jsonData.displayName)"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/rest/api/3/myself",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"rest",
						"api",
						"3",
						"myself"
					]
				},
				"description": "Get current user\r\nGET /rest/api/3/myself\r\n\r\nReturns details for the current user.\r\n\r\nPermissions required: Permission to access Jira.\r\n\r\nApp scope required: READ\r\n\r\nOAuth scopes required: \r\nread:jira-user\r\nRequest\r\nQUERY PARAMETERS\r\nexpand\r\nstring\r\n\r\nUse expand to include additional information about user in the response. This parameter accepts a comma-separated list. Expand options include:\r\n\r\ngroups Returns all groups, including nested groups, the user belongs to.\r\napplicationRoles Returns the application roles the user is assigned to."
			},
			"response": []
		},
		{
			"name": "Get dashboards",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "671f546c-6513-4711-8068-3a8f9a0ebac1",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"for (var x in jsonData.dashboards) {};\r",
							"\r",
							"pm.test(\"User \" + pm.environment.get(\"userEmail\") + \" has \" + (Number(x) + 1) + \" dashboards\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/rest/api/3/dashboard",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"rest",
						"api",
						"3",
						"dashboard"
					]
				},
				"description": "Get all dashboards\r\nGET /rest/api/3/dashboard\r\n\r\nReturns a list of dashboards owned by or shared with the user. The list may be filtered to include only favorite or owned dashboards.\r\n\r\nThis operation can be accessed anonymously.\r\n\r\nPermissions required: None.\r\n\r\nApp scope required: READ\r\n\r\nOAuth scopes required: \r\nread:jira-work\r\nRequest\r\nQUERY PARAMETERS\r\nfilter\r\nstring\r\n\r\nThe filter applied to the list of dashboards. Valid values are:\r\n\r\nfavourite Returns dashboards the user has marked as favorite.\r\nmy Returns dashboards owned by the user.\r\nValid values: my, favourite\r\n\r\nstartAt\r\ninteger\r\n\r\nThe index of the first item to return in a page of results (page offset).\r\n\r\nDefault: 0, Format: int32\r\nmaxResults\r\ninteger\r\n\r\nThe maximum number of items to return per page.\r\n\r\nDefault: 20, Format: int32"
			},
			"response": []
		},
		{
			"name": "Get projects paginated",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "faeb1057-ba7f-4ce7-8759-8aca3a067498",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"for (var x in jsonData.values) {};\r",
							"\r",
							"pm.test(\"User \" + pm.environment.get(\"userEmail\") + \" has \" + (Number(x) + 1) + \" projects\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/rest/api/3/project/search",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"rest",
						"api",
						"3",
						"project",
						"search"
					]
				},
				"description": "Get projects paginated\r\nGET /rest/api/3/project/search\r\n\r\nReturns a paginated list of projects visible to the user.\r\n\r\nThis operation can be accessed anonymously.\r\n\r\nPermissions required: Projects are returned only where the user has one of:\r\n\r\nBrowse Projects project permission for the project.\r\nAdminister Projects project permission for the project.\r\nAdminister Jira global permission.\r\nApp scope required: READ\r\n\r\nOAuth scopes required: \r\nread:jira-work\r\nRequest\r\nQUERY PARAMETERS\r\nstartAt\r\ninteger\r\n\r\nThe index of the first item to return in a page of results (page offset).\r\n\r\nDefault: 0, Format: int64\r\nmaxResults\r\ninteger\r\n\r\nThe maximum number of items to return per page.\r\n\r\nDefault: 50, Format: int32\r\norderBy\r\nstring\r\n\r\nOrder the results by a field.\r\n\r\ncategory Sorts by project category. A complete list of category IDs is found using Get all project categories.\r\nissueCount Sorts by the total number of issues in each project.\r\nkey Sorts by project key.\r\nlastIssueUpdatedTime Sorts by the last issue update time.\r\nname Sorts by project name.\r\nowner Sorts by project lead.\r\narchivedDate EXPERIMENTAL. Sorts by project archived date.\r\ndeletedDate EXPERIMENTAL. Sorts by project deleted date.\r\nDefault: key\r\nValid values: category, -category, +category, key, -key, +key, name, -name, +name, owner ...(Show more)\r\n\r\nquery\r\nstring\r\n\r\nFilter the results using a literal string. Projects with a matching key or name are returned (case insensitive).\r\n\r\ntypeKey\r\nstring\r\n\r\nOrders results by the project type. This parameter accepts a comma-separated list. Valid values are business, service_desk, and software.\r\n\r\ncategoryId\r\ninteger\r\n\r\nThe ID of the project's category. A complete list of category IDs is found using the Get all project categories operation.\r\n\r\nFormat: int64\r\nsearchBy\r\nstring\r\n\r\nDefault: key, name\r\naction\r\nstring\r\n\r\nFilter results by projects for which the user can:\r\n\r\nview the project, meaning that they have one of the following permissions:\r\n\r\nBrowse projects project permission for the project.\r\nAdminister projects project permission for the project.\r\nAdminister Jira global permission.\r\nbrowse the project, meaning that they have the Browse projects project permission for the project.\r\n\r\nedit the project, meaning that they have one of the following permissions:\r\n\r\nAdminister projects project permission for the project.\r\nAdminister Jira global permission.\r\nDefault: view\r\nValid values: view, browse, edit\r\n\r\nexpand\r\nstring\r\n\r\nUse expand to include additional information in the response. This parameter accepts a comma-separated list. Expanded options include:\r\n\r\ndescription Returns the project description.\r\nprojectKeys Returns all project keys associated with a project.\r\nlead Returns information about the project lead.\r\nissueTypes Returns all issue types associated with the project.\r\nurl Returns the URL associated with the project.\r\ninsight EXPERIMENTAL. Returns the insight details of total issue count and last issue update time for the project.\r\nstatus\r\nArray<string>\r\n\r\nEXPERIMENTAL. Filter results by project status:\r\n\r\nlive Search live projects.\r\narchived Search archived projects.\r\ndeleted Search deleted projects, those in the recycle bin.\r\nValid values: live, archived, deleted"
			},
			"response": []
		},
		{
			"name": "Create project",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "32a799cc-dbe3-4a86-8da6-6342ad423b96",
						"exec": [
							"var randomNum = Math.random().toFixed(3) * 1000;\r",
							"\r",
							"var projectKeyVar = \"P\" + randomNum;\r",
							"pm.environment.set(\"projectKey\", projectKeyVar)\r",
							"\r",
							"var projectNameVar = \"Software testing for project \" + projectKeyVar;\r",
							"pm.environment.set(\"projectName\", projectNameVar)"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "46668684-751a-4ee8-b08a-e9d1acbf7879",
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Project with key \" + pm.environment.get(\"projectKey\") + \" has been created\", function () {\r",
							"    pm.expect(jsonData.key).to.eql(pm.environment.get(\"projectKey\"))\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"key\": \"{{projectKey}}\",\r\n  \"name\": \"{{projectName}}\",\r\n  \"projectTypeKey\": \"software\",\r\n  \"projectTemplateKey\": \"com.pyxis.greenhopper.jira:gh-simplified-agility-kanban\",\r\n  \"leadAccountId\": \"5f699fbce4ac20006aa6f28c\",\r\n  \"description\": \"Example Project description\",\r\n  \"url\": \"http://atlassian.com\",\r\n  \"assigneeType\": \"PROJECT_LEAD\",\r\n  \"avatarId\": 10200\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/rest/api/3/project",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"rest",
						"api",
						"3",
						"project"
					]
				},
				"description": "Create project\r\nPOST /rest/api/3/project\r\n\r\nCreates a project based on a project type template.\r\n\r\nThe project types are available according to the installed Jira features as follows:\r\n\r\nJira Core, the default, enables business projects.\r\nJira Service Desk enables service_desk projects.\r\nJira Software enables software projects.\r\nTo determine which features are installed, go to Jira settings > Apps > Manage apps and review the System Apps list. To add JIRA Software or JIRA Service Desk into a JIRA instance, use Jira settings > Apps > Finding new apps. For more information, see Managing add-ons.\r\n\r\nPermissions required: Administer Jira global permission.\r\n\r\nApp scope required: PROJECT_ADMIN\r\n\r\nOAuth scopes required: \r\nmanage:jira-configuration\r\nRequest\r\nBODY PARAMETERS\r\nkey\r\nstring\r\n\r\nProject keys must be unique and start with an uppercase letter followed by one or more uppercase alphanumeric characters. The maximum length is 10 characters. Required when creating a project. Optional when updating a project.\r\n\r\nname\r\nstring\r\n\r\nThe name of the project. Required when creating a project. Optional when updating a project.\r\n\r\nprojectTypeKey\r\nstring\r\n\r\nThe project type, which dictates the application-specific feature set. Required when creating a project. Not applicable for the Update project resource.\r\n\r\nValid values: software, service_desk, business\r\n\r\nprojectTemplateKey\r\nstring\r\n\r\nA prebuilt configuration for a project. The type of the projectTemplateKey must match with the type of the projectTypeKey. Required when creating a project. Not applicable for the Update project resource.\r\n\r\ndescription\r\nstring\r\n\r\nA brief description of the project.\r\n\r\nlead\r\nstring\r\n\r\nThis parameter is deprecated because of privacy changes. Use leadAccountId instead. See the migration guide for details. The user name of the project lead. Either lead or leadAccountId must be set when creating a project. Optional when updating a project. Cannot be provided with leadAccountId.\r\n\r\nleadAccountId\r\nstring\r\n\r\nThe account ID of the project lead. Either lead or leadAccountId must be set when creating a project. Optional when updating a project. Cannot be provided with lead.\r\n\r\nMax length: 128\r\nurl\r\nstring\r\n\r\nA link to information about this project, such as project documentation\r\n\r\nassigneeType\r\nstring\r\n\r\nThe default assignee when creating issues for this project.\r\n\r\nValid values: PROJECT_LEAD, UNASSIGNED\r\n\r\navatarId\r\ninteger\r\n\r\nAn integer value for the project's avatar.\r\n\r\nFormat: int64\r\nissueSecurityScheme\r\ninteger\r\n\r\nThe ID of the issue security scheme for the project, which enables you to control who can and cannot view issues. Use the Get issue security schemes resource to get all issue security scheme IDs.\r\n\r\nFormat: int64\r\npermissionScheme\r\ninteger\r\n\r\nThe ID of the permission scheme for the project. Use the Get all permission schemes resource to see a list of all permission scheme IDs.\r\n\r\nFormat: int64\r\nnotificationScheme\r\ninteger\r\n\r\nThe ID of the notification scheme for the project. Use the Get notification schemes resource to get a list of notification scheme IDs.\r\n\r\nFormat: int64\r\ncategoryId\r\ninteger\r\n\r\nThe ID of the project's category. A complete list of category IDs is found using the Get all project categories operation.\r\n\r\nFormat: int64"
			},
			"response": []
		},
		{
			"name": "Get project components",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6eff88fe-8e8c-46d7-a02b-7ecfc86d20e4",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"for (var x in jsonData) {};\r",
							"\r",
							"if(x === NaN) {\r",
							"    pm.test(\"Project with key \" + pm.environment.get(\"projectKey\") + \" has no components\")\r",
							"}else{\r",
							"    pm.test(\"Project with key \" + pm.environment.get(\"projectKey\") + \" has \" + (Number(x) + 1) + \" components\")\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/rest/api/3/project/{{projectKey}}/components",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"rest",
						"api",
						"3",
						"project",
						"{{projectKey}}",
						"components"
					]
				},
				"description": "Get project components\r\nGET /rest/api/3/project/{projectIdOrKey}/components\r\n\r\nReturns all components in a project. See the Get project components paginated resource if you want to get a full list of components with pagination.\r\n\r\nThis operation can be accessed anonymously.\r\n\r\nPermissions required: Browse Projects project permission for the project.\r\n\r\nApp scope required: READ\r\n\r\nOAuth scopes required: \r\nread:jira-work\r\nRequest\r\nPATH PARAMETERS\r\nprojectIdOrKey \r\nREQUIRED\r\nstring\r\n\r\nThe project ID or project key (case sensitive)."
			},
			"response": []
		},
		{
			"name": "Create issue",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8e71744a-7169-40c2-a8d5-fed6481a4e69",
						"exec": [
							"var randomNum = Math.random().toFixed(3) * 1000;\r",
							"\r",
							"var issueNameVar = \"List of issues \" + randomNum;\r",
							"pm.environment.set(\"issueName\", issueNameVar);\r",
							"\r",
							"pm.environment.set(\"issueType\", \"Task\");"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "278f2719-6e2f-4ff3-85df-faff1a0e8378",
						"exec": [
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.environment.set(\"issueKey\", jsonData.key);\r",
							"\r",
							"pm.test(pm.environment.get(\"issueType\") + \" \" + pm.environment.get(\"issueName\") + \" has been created\", function () {\r",
							"    pm.expect(jsonData.key).to.eql(pm.environment.get(\"issueKey\"))\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"fields\": {\r\n        \"project\": {\r\n            \"key\": \"{{projectKey}}\"\r\n        },\r\n        \"summary\": \"{{issueName}}\",\r\n        \"description\": {\r\n      \"type\": \"doc\",\r\n      \"version\": 1,\r\n      \"content\": [\r\n        {\r\n          \"type\": \"paragraph\",\r\n          \"content\": [\r\n            {\r\n              \"text\": \"Create a list of issues for the meeting.\",\r\n              \"type\": \"text\"\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    },\r\n        \"issuetype\": {\r\n            \"name\": \"{{issueType}}\"\r\n        }\r\n    }\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/rest/api/3/issue",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"rest",
						"api",
						"3",
						"issue"
					]
				},
				"description": "Create issue\r\nPOST /rest/api/3/issue\r\n\r\nCreates an issue or, where the option to create subtasks is enabled in Jira, a subtask. A transition may be applied, to move the issue or subtask to a workflow step other than the default start step, and issue properties set.\r\n\r\nThe content of the issue or subtask is defined using update and fields. The fields that can be set in the issue or subtask are determined using the Get create issue metadata. These are the same fields that appear on the issue's create screen. Note that the description, environment, and any textarea type custom fields (multi-line text fields) take Atlassian Document Format content. Single line custom fields (textfield) accept a string and don't handle Atlassian Document Format content.\r\n\r\nCreating a subtask differs from creating an issue as follows:\r\n\r\nissueType must be set to a subtask issue type (use Get create issue metadata to find subtask issue types).\r\nparent must contain the ID or key of the parent issue.\r\nIn a next-gen project any issue may be made a child providing that the parent and child are members of the same project. In a classic project the parent field is only valid for subtasks.\r\n\r\nPermissions required: Browse projects and Create issues project permissions for the project in which the issue or subtask is created.\r\n\r\nApp scope required: WRITE\r\n\r\nOAuth scopes required: \r\nwrite:jira-work\r\nRequest\r\nQUERY PARAMETERS\r\nupdateHistory\r\nboolean\r\n\r\nWhether the project in which the issue is created is added to the user's Recently viewed project list, as shown under Projects in Jira.\r\n\r\nDefault: false\r\nBODY PARAMETERS\r\nDetails of an issue update request.\r\n\r\ntransition\r\nIssueTransition\r\n\r\nDetails of a transition. Required when performing a transition, optional when creating or editing an issue.\r\n\r\nfields\r\nobject\r\n\r\nList of issue screen fields to update, specifying the sub-field to update and its value for each field. This field provides a straightforward option when setting a sub-field. When multiple sub-fields or other operations are required, use update. Fields included in here cannot be included in update.\r\n\r\nupdate\r\nobject\r\n\r\nList of operations to perform on issue screen fields. Note that fields included in here cannot be included in fields.\r\n\r\nhistoryMetadata\r\nHistoryMetadata\r\n\r\nAdditional issue history details.\r\n\r\nproperties\r\nArray<EntityProperty>\r\n\r\nDetails of issue properties to be add or update.\r\n\r\nAdditional Properties\r\nanything\r\n\r\nExtra properties of any type may be provided to this object."
			},
			"response": []
		},
		{
			"name": "Get issue comments",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8cd00fd2-9b49-457f-b20d-3324af2d271f",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"for (var x in jsonData.comments) {};\r",
							"\r",
							"if(x === NaN) {\r",
							"    pm.test(\"Issue \" + pm.environment.get(\"issueKey\") + \" has no comments\")\r",
							"}else{\r",
							"    pm.test(\"Issue \" + pm.environment.get(\"issueKey\") + \" has \" + (Number(x) + 1) + \" comments\")\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/rest/api/3/issue/{{issueKey}}/comment",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"rest",
						"api",
						"3",
						"issue",
						"{{issueKey}}",
						"comment"
					]
				},
				"description": "Get comments\r\nGET /rest/api/3/issue/{issueIdOrKey}/comment\r\n\r\nReturns all comments for an issue.\r\n\r\nThis operation can be accessed anonymously.\r\n\r\nPermissions required: Comments are included in the response where the user has:\r\n\r\nBrowse projects project permission for the project containing the comment.\r\nIf issue-level security is configured, issue-level security permission to view the issue.\r\nIf the comment has visibility restrictions, belongs to the group or has the role visibility is role visibility is restricted to.\r\nApp scope required: READ\r\n\r\nOAuth scopes required: \r\nread:jira-work\r\nRequest\r\nPATH PARAMETERS\r\nissueIdOrKey \r\nREQUIRED\r\nstring\r\n\r\nThe ID or key of the issue.\r\n\r\nQUERY PARAMETERS\r\nstartAt\r\ninteger\r\n\r\nThe index of the first item to return in a page of results (page offset).\r\n\r\nDefault: 0, Format: int64\r\nmaxResults\r\ninteger\r\n\r\nThe maximum number of items to return per page.\r\n\r\nDefault: 50, Format: int32\r\norderBy\r\nstring\r\n\r\nOrder the results by a field. Accepts created to sort comments by their created date.\r\n\r\nValid values: created, -created, +created\r\n\r\nexpand\r\nstring\r\n\r\nUse expand to include additional information about comments in the response. This parameter accepts renderedBody, which returns the comment body rendered in HTML."
			},
			"response": []
		},
		{
			"name": "Get issue metadata",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dc714fd4-a7da-4bc1-9e50-31d51b6047d9",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"for (var x in jsonData.projects[0].issuetypes) {};\r",
							"\r",
							"pm.test(\"User \" + pm.environment.get(\"userEmail\") + \" has \" + (Number(x) + 1) + \" issue types\" + \" in \" + jsonData.projects[0].name + \" project\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/rest/api/3/issue/createmeta?projectKeys={{projectKey}}&expand=projects.issuetypes.fields",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"rest",
						"api",
						"3",
						"issue",
						"createmeta"
					],
					"query": [
						{
							"key": "projectKeys",
							"value": "{{projectKey}}"
						},
						{
							"key": "expand",
							"value": "projects.issuetypes.fields"
						}
					]
				},
				"description": "Get create issue metadata\r\nGET /rest/api/3/issue/createmeta\r\n\r\nReturns details of projects, issue types within projects, and, when requested, the create screen fields for each issue type for the user. Use the information to populate the requests in Create issue and Create issues.\r\n\r\nThe request can be restricted to specific projects or issue types using the query parameters. The response will contain information for the valid projects, issue types, or project and issue type combinations requested. Note that invalid project, issue type, or project and issue type combinations do not generate errors.\r\n\r\nThis operation can be accessed anonymously.\r\n\r\nPermissions required: Create issues project permission in the requested projects.\r\n\r\nApp scope required: READ\r\n\r\nOAuth scopes required: \r\nread:jira-work\r\nRequest\r\nQUERY PARAMETERS\r\nprojectIds\r\nArray<string>\r\n\r\nList of project IDs. This parameter accepts a comma-separated list. Multiple project IDs can also be provided using an ampersand-separated list. For example, projectIds=10000,10001&projectIds=10020,10021. This parameter may be provided with projectKeys.\r\n\r\nprojectKeys\r\nArray<string>\r\n\r\nList of project keys. This parameter accepts a comma-separated list. Multiple project keys can also be provided using an ampersand-separated list. For example, projectKeys=proj1,proj2&projectKeys=proj3. This parameter may be provided with projectIds.\r\n\r\nissuetypeIds\r\nArray<string>\r\n\r\nList of issue type IDs. This parameter accepts a comma-separated list. Multiple issue type IDs can also be provided using an ampersand-separated list. For example, issuetypeIds=10000,10001&issuetypeIds=10020,10021. This parameter may be provided with issuetypeNames.\r\n\r\nissuetypeNames\r\nArray<string>\r\n\r\nList of issue type names. This parameter accepts a comma-separated list. Multiple issue type names can also be provided using an ampersand-separated list. For example, issuetypeNames=name1,name2&issuetypeNames=name3. This parameter may be provided with issuetypeIds.\r\n\r\nexpand\r\nstring\r\n\r\nUse expand to include additional information about issue metadata in the response. This parameter accepts projects.issuetypes.fields, which returns information about the fields in the issue creation screen for each issue type. Fields hidden from the screen are not returned. Use the information to populate the fields and update fields in Create issue and Create issues."
			},
			"response": []
		},
		{
			"name": "Delete project",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a8383edd-90e7-4b59-9d68-4e87f66f6185",
						"exec": [
							"if (responseCode.code === 204) {\r",
							"    pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"    pm.test(\"Supposed, project with key \" + pm.environment.get(\"projectKey\") + \" has been deleted\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"})\r",
							"} else {\r",
							"    pm.test(\"Status code is 204\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							"    pm.test(\"Project with key \" + pm.environment.get(\"projectKey\") + \" has not been found\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"})\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"key\": \"EX\",\r\n  \"name\": \"Example\",\r\n  \"projectTypeKey\": \"business\",\r\n  \"projectTemplateKey\": \"com.atlassian.jira-core-project-templates:jira-core-simplified-process-control\",\r\n  \"leadAccountId\": \"5f699fbce4ac20006aa6f28c\",\r\n  \"description\": \"Example Project description\",\r\n  \"url\": \"http://atlassian.com\",\r\n  \"assigneeType\": \"PROJECT_LEAD\",\r\n  \"avatarId\": 10200\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseURL}}/rest/api/3/project/{{projectKey}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"rest",
						"api",
						"3",
						"project",
						"{{projectKey}}"
					]
				},
				"description": "DELETE /rest/api/3/project/{projectIdOrKey}\r\n\r\nDeletes a project.\r\n\r\nPermissions required: Administer Jira global permission.\r\n\r\nApp scope required: PROJECT_ADMIN\r\n\r\nOAuth scopes required: \r\nmanage:jira-configuration\r\nRequest\r\nPATH PARAMETERS\r\nprojectIdOrKey \r\nREQUIRED\r\nstring\r\n\r\nThe project ID or project key (case sensitive).\r\n\r\nQUERY PARAMETERS\r\nenableUndo\r\nboolean\r\n\r\nEXPERIMENTAL. Whether this project is placed in the Jira recycle bin where it will be available for restoration.\r\n\r\nDefault: false"
			},
			"response": []
		},
		{
			"name": "Get deleted project",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "810646ac-e489-41c3-ba84-b786187e0ef9",
						"exec": [
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Project with key \" + pm.environment.get(\"projectKey\") + \" has not been found\")"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseURL}}/rest/api/3/project/{{projectKey}}",
					"host": [
						"{{baseURL}}"
					],
					"path": [
						"rest",
						"api",
						"3",
						"project",
						"{{projectKey}}"
					]
				},
				"description": "Get project\r\nGET /rest/api/3/project/{projectIdOrKey}\r\n\r\nReturns the project details for a project.\r\n\r\nThis operation can be accessed anonymously.\r\n\r\nPermissions required: Browse projects project permission for the project.\r\n\r\nApp scope required: READ\r\n\r\nOAuth scopes required: \r\nread:jira-work\r\nRequest\r\nPATH PARAMETERS\r\nprojectIdOrKey \r\nREQUIRED\r\nstring\r\n\r\nThe project ID or project key (case sensitive).\r\n\r\nQUERY PARAMETERS\r\nexpand\r\nstring\r\n\r\nUse expand to include additional information in the response. This parameter accepts a comma-separated list. Note that the project description, issue types, and project lead are included in all responses by default. Expand options include:\r\n\r\ndescription The project description.\r\nissueTypes The issue types associated with the project.\r\nlead The project lead.\r\nprojectKeys All project keys associated with the project.\r\nissueTypeHierarchy The project issue type hierarchy.\r\nproperties\r\nArray<string>\r\n\r\nA list of project properties to return for the project. This parameter accepts a comma-separated list."
			},
			"response": []
		}
	],
	"auth": {
		"type": "basic",
		"basic": [
			{
				"key": "username",
				"value": "{{userEmail}}",
				"type": "string"
			},
			{
				"key": "password",
				"value": "{{token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "a13b57c0-8bc3-4147-800f-844390e57165",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "0be600a4-de25-4a16-996e-915e6ea565cf",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}